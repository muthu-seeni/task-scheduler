C:\users\seeni\appdata\local\programs\python\python310\python.exe
python.exe

C:\Users\seeni\AppData\Local\Programs\Eclipse Adoptium\jdk-21.0.8.9-hotspot\

# 1. Delete all existing firewall rules named "Python"
netsh advfirewall firewall delete rule name="Python"

# 2. Add a new rule for your Python.exe, only for Private network
netsh advfirewall firewall add rule name="Python Private" `
    dir=in action=allow program="C:\Users\seeni\AppData\Local\Programs\Python\Python310\python.exe" `
    enable=yes profile=Private


C:\Program Files\PostgreSQL\17
C:\Program Files\PostgreSQL\17\data    pwd taskdb

# ===============================
# Python Unit Tests
# ===============================
python -m unittest test_tasks.py
python -m unittest test_integration.py
python -m unittest test\test_integration.py
python -m unittest test.test_integration
python -m unittest discover
python -m unittest discover -s test -p "test_*.py"

# ===============================
# File / Folder Operations
# ===============================
tree /F /A
tree app /f
type nul > test_integration.py
type nul > __init__.py
type nul > migrate_sqlite_to_mysql.py
type nul > setupenv.env

# ===============================
# Navigation
# ===============================
cd test
cd..
cd D:\Projects\TaskScheduler
cd D:\Projects\TaskScheduler\instance

# ===============================
# Git Commands
# ===============================
git status
git add .
git commit -m "Refactor: routes, scheduler, new auth service, templates, and test setup"
git branch
git branch -r
git branch backup-before-mysql
git push origin main
git push origin backup-before-mysql
git remote -v
git push -u origin main

git remote add origin https://github.com/muthu-seeni/task-scheduler.git
git branch -M main
git push -u origin main

# ===============================
# Backup Commands
# ===============================
Compress-Archive -Path .\* -DestinationPath ..\TaskScheduler_backup_$(Get-Date -Format "yyyyMMdd_HHmm").zip
powershell -Command "Compress-Archive -Path .\* -DestinationPath ..\TaskScheduler_backup_%DATE:~10,4%%DATE:~4,2%%DATE:~7,2%_%TIME:~0,2%%TIME:~3,2%.zip"

copy app.db D:\Projects\TaskScheduler_backup\
copy D:\Projects\TaskScheduler\instance\task_scheduler.db D:\Projects\TaskScheduler_backup\
mkdir D:\Projects\TaskScheduler_backup

# ===============================
# MySQL Commands
# ===============================
mysql --version
mysql -u root -p
"C:\Program Files\MySQL\MySQL Server 8.0\bin\mysql.exe" -u root -p    -  open my sql with executable file
"C:\Program Files\MySQL\MySQL Server 8.0\bin\mysql.exe" -u appuser -p
"C:\Program Files\MySQL\MySQL Server 8.0\bin\mysql.exe" -u admin -p
"C:\Program Files\MySQL\MySQL Server 8.0\bin\mysql.exe" -u muthu -p

# Export MySQL Workbench history
(for %f in ("%APPDATA%\MySQL\Workbench\sql_history\*") do @type "%f") | findstr /r /v "^$" > "%USERPROFILE%\Desktop\mysql_history.txt"
(for %f in ("C:\Users\seeni\AppData\Roaming\MySQL\Workbench\sql_history\*") do @type "%f") | findstr /r /v "^$" > "%USERPROFILE%\Desktop\mysql_history.txt"

# DOS Command History
doskey /history > "D:\Projects\TaskScheduler\cmd_history.txt"
doskey /history >> "D:\Projects\TaskScheduler\cmd_history.txt"

# ===============================
# SQLite Commands
# ===============================
sqlite3 task_scheduler.db .schema > sqlite_schema.sql
C:\sqlite\sqlite3.exe task_scheduler.db .schema > sqlite_schema.sql
where sqlite3
notepad sqlite_schema.sql

python -c "import sqlite3; conn=sqlite3.connect(r'D:\Projects\TaskScheduler\instance\task_scheduler.db'); [print(row[0]) for row in conn.execute(\"SELECT sql FROM sqlite_master WHERE type='table';\") if row[0]]; conn.close()" > sqlite_schema.sql
python -c "import sqlite3; conn=sqlite3.connect(r'D:\Projects\TaskScheduler\instance\task_scheduler.db'); print([row[0] for row in conn.execute('SELECT name FROM sqlite_master WHERE type=\"table\";')]); conn.close()"
python -c "import sqlite3; conn=sqlite3.connect(r'D:\Projects\TaskScheduler\instance\task_scheduler.db'); [print(t[0], '?', conn.execute(f'SELECT COUNT(*) FROM {t[0]}').fetchone()[0], 'rows') for t in conn.execute(\"SELECT name FROM sqlite_master WHERE type='table';\")]; conn.close()"
python -c "import sqlite3; conn=sqlite3.connect(r'D:\Projects\TaskScheduler\instance\task_scheduler.db'); [print(f\"{t[0]} ? {[c[1] for c in conn.execute(f'PRAGMA table_info({t[0]})')]}\" ) for t in conn.execute(\"SELECT name FROM sqlite_master WHERE type='table';\")]; conn.close()"
python -c "import sqlite3; conn=sqlite3.connect(r'D:\Projects\TaskScheduler\instance\task_scheduler.db'); f=open(r'D:\Projects\TaskScheduler\instance\sqlite_schema.sql','w',encoding='utf-8'); [f.write(line+'\n') for line in conn.iterdump()]; f.close(); conn.close()"

# ===============================
# Convert SQLite Schema for MySQL
# ===============================
python -c "import re; f=open(r'D:\Projects\TaskScheduler\instance\sqlite_schema.sql','r',encoding='utf-8'); sql=f.read(); f.close(); sql=re.sub(r'AUTOINCREMENT','AUTO_INCREMENT',sql,flags=re.IGNORECASE); sql=re.sub(r'BOOLEAN','TINYINT(1)',sql,flags=re.IGNORECASE); sql=re.sub(r'\"','`',sql); f=open(r'D:\Projects\TaskScheduler\instance\mysql_converted_schema.sql','w',encoding='utf-8'); f.write(sql); f.close(); print('MySQL schema saved to mysql_converted_schema.sql')"

python -c "import re; f=open(r'D:\Projects\TaskScheduler\instance\sqlite_schema.sql','r',encoding='utf-8'); sql=f.read(); f.close(); sql=re.sub(r'(?i)BEGIN TRANSACTION;','',sql); sql=re.sub(r'(?i)COMMIT;','',sql); sql=re.sub(r'(?i)PRAGMA.*?;','',sql); sql=re.sub(r'AUTOINCREMENT','AUTO_INCREMENT',sql,flags=re.IGNORECASE); sql=re.sub(r'BOOLEAN','TINYINT(1)',sql,flags=re.IGNORECASE); sql=re.sub(r'\"','`',sql); f=open(r'D:\Projects\TaskScheduler\instance\mysql_cleaned_schema.sql','w',encoding='utf-8'); f.write(sql); f.close(); print('Cleaned MySQL schema saved to mysql_cleaned_schema.sql')"

# ===============================
# Migrate Data from SQLite to MySQL
# ===============================
python -c "import sqlite3, pymysql; sqlite_conn=sqlite3.connect(r'D:\Projects\TaskScheduler\instance\task_scheduler.db'); mysql_conn=pymysql.connect(host='localhost', user='root', password='YOUR_PASSWORD', db='task_scheduler', charset='utf8mb4'); sqlite_cur=sqlite_conn.cursor(); mysql_cur=mysql_conn.cursor(); [mysql_cur.execute(f\"INSERT IGNORE INTO {t[0]} ({','.join([c[1] for c in sqlite_conn.execute(f'PRAGMA table_info({t[0]})')])}) VALUES ({','.join(['%s']*len([c[1] for c in sqlite_conn.execute(f'PRAGMA table_info({t[0]})')]))})\", row) for t in sqlite_conn.execute(\"SELECT name FROM sqlite_master WHERE type='table';\") for row in sqlite_conn.execute(f\"SELECT * FROM {t[0]}\")]; mysql_conn.commit(); sqlite_conn.close(); mysql_cur.close(); mysql_conn.close(); print('Data migrated successfully')"

# ===============================
# Python Environment & Dependencies
# ===============================
..\venv\Scripts\activate
deactivate
rmdir /s /q venv
python -m venv venv
venv\Scripts\activate
python -m pip install --upgrade pip
pip install -r requirements.txt
pip install pymysql
pip install python-dotenv
python app.py


Step 1: Stop tracking .env files locally
git rm --cached setupenv.env "setupenv - Copy.env"
git commit -m "Stop tracking local env files"
git push origin main


Removes the files from Git without deleting them locally.

Updates the repo so future changes to .env are ignored (with .gitignore).

Step 2: Add .env files to .gitignore
git add .gitignore
git commit -m "Add .env files to .gitignore"
git push origin main


Ensures Git ignores .env files going forward.

Step 3: Use BFG Repo-Cleaner to purge .env from history
java -jar C:\tools\bfg.jar --delete-files "*.env" D:\Projects\TaskScheduler


Deletes all .env files from all previous commits.

Generates a report in D:\Projects\TaskScheduler.bfg-report\.

Step 4: Clean Git references and optimize repo
git reflog expire --expire=now --all
git gc --prune=now --aggressive


Expire old reflog entries and aggressively prune unreachable objects.

Makes the purge permanent locally.

Step 5: Force push the cleaned history
git push origin main --force


Updates GitHub with the rewritten history.

Important: anyone who previously cloned the repo will need to reclone.

âœ… Result

.env files are removed from Git history and ignored in future commits.

Local copies of .env remain untouched.

Repository is safe to push or deploy without exposing sensitive info.
